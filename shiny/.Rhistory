View(ticks)
ticks$Ticker <- gsub("\\^", "", ticks$Ticker)
View(ticks)
ticks$Ticker <- paste("SSE/",ticks$Ticker, sep = "")
View(ticks)
?incProgress
runApp
runApp()
for (i in ticks$Ticker) print(i)
s <- new.env()
for (i in ticks$Ticker){
incProgress(value = 1/nrow(ticks), detail = ticks[[i]])
s[[i]] <- Quandl(Ticker[[i]], start_date = "2015-1-1")
}
s <- new.env()
for (i in ticks$Ticker){
incProgress(value = 1/nrow(ticks), detail = ticks[[i]])
s[[i]] <- Quandl(ticks[[i]], start_date = "2015-1-1")
}
ticks[[i]]
ticks
ticks[i]
s <- new.env()
for (i in 1:nrow(ticks)){
incProgress(value = 1/nrow(ticks), detail = ticks[[i]])
s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1")
}
s <- new.env()
for (i in 1:nrow(ticks)){
#incProgress(value = 1/nrow(ticks), detail = ticks[[i]])
s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1")
}
s <- new.env()
for (i in 1:nrow(ticks)){
#incProgress(value = 1/nrow(ticks), detail = ticks[[i]])
try(s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1"))
}
s$`SSE/AB1`
runApp()
runApp()
1/nrow(ticks)
runApp()
runApp()
runApp()
for (i in 1:nrow(ticks)){
incProgress(amount = 1/nrow(ticks), detail = print(ticks$Ticker[i]))
try(s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1"))
}
ls(s)
length(ls(s))
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
tmp <- s[[i]]
}
tmp
tmp <- tmp %>% arrange(Date)
tmp
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
View(tmp)
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
}
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
})
}
s$`SSE/AFX`
TSI <- data.frame(Date, TSI)
TSI <- data.frame(Date = {}, TSI = {})
View(TSI)
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
TSI <- rbind(TSI, (tmp$Date[1], tmp$TSI[1]))
})#End Try
}#End FOR loop
TSI <- data.frame(Date = {}, TSI = {})
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
TSI <- rbind(TSI, data.frame(tmp$Date[1], tmp$TSI[1]))
})#End Try
}#End FOR loop
View(TSI)
TSI <- data.frame()
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1]))
})#End Try
}#End FOR loop
View(TSI)
View(TSI)
colnames(TSI) <- c("Date", "Ticker", "TSI")
View(TSI)
View(ticks)
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
View(TSIlist)
?order
?arrange
runApp()
runApp()
runApp()
mean(TSIlist$TSI)
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- rbind(TSIlist, mean(TSIlist$TSI))
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Ticker, Name, TSI, Date)
View(TSIlist)
runApp()
runApp()
runApp()
deployApp()
deployApp()
runApp()
quantile(.75, TSIlist$TSI)
quantile(TSIlist$TSI, .75)
View(TSIlist)
quantile(TSIlist$TSI, .8)
67*.8
67- .Last.value
runApp()
?renderDataTable
runApp()
library(datasets)
library(DT)
install.packages(DT)
install.packages("data.table")
library(data.table)
install.packages("DT")
library(DT)
runApp()
str(TSIlist)
TSIlist <- datatable(TSIlist, filter = "top")
str(TSIlist)
output$TecSMEAN <- renderText(sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8)))
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date)
sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8))
TSIlist <- datatable(TSIlist, filter = "top")
sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8))
?datatable
runApp()
quantile(TSIlist$TSI, 0.8)
quantile(TSIlist$TSI, 0.8, na.rm = TRUE)
mean(TSIlist$x$data$TSI)
quantile(TSIlist$x$data$TSI,.8)
# Merge
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date)
sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8)
)
renderText(sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8)))
renderText(sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8))))
renderText(sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8)))
sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8))
runApp()
runApp()
TSIlist <- datatable(TSIlist, filter = "top")
runApp()
?gvisTable
runApp()
gvisTable(TSIlist)
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date)
gvisTable(TSIlist)
runApp()
runApp()
tmp
plot(return(tmp$`Previous Day Price`))
library(TTR)
?TTR
library(PerformanceAnalytics)
?"PerformanceAnalytics"
Return.clean(tmp)
tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
plot(1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`))
plot(1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`), type = "l")
a <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
mean(a)
mean(a, na.rm = TUE)
mean(a, na.rm = TRUE)
sd(a, na.rm = TRUE)
b <- mean(a, na.rm = TRUE)
c <- sd(a, na.rm = TRUE)
c/b
hist(a)
hist(a, n=40)
runApp()
library(quantmod)
getSymbols("COP.DE")
plot(COP.DE)
volatility(COP.DE)
plot(volatility(COP.DE))
?ttr
?TTR
cop <- Quandl("YAHOO/DU_COP")
cop
plot(cop)
plot(cop$Date,cop$`Adjusted Close`)
x <- cop$`Adjusted Close`/lag(cop$`Adjusted Close`)
plot(cx)
plot(x)
y <- mean(x)
y
y <- mean(x, na.rm = )
y <- mean(x, na.rm = TRUE)
z <- sd(x, na.rm = RUE)
z <- sd(x, na.rm = TRUE)
plot(z)
y
z
y/z
tmp$ret <- tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
View(tmp)
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
View(tmp)
tmp$ret <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`).
tmp$ret <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
View(tmp)
rm(tmp)
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
View(tmp)
rm(tmp)
View(tmp)
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
View(tmp)
?rbind
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price`/lag(tmp$`Previous Day Price`)
View(tmp)
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
vola <- mean(tmp$ret, na.rm = TRUE) /sd(tmp$ret, na.rm = TRUE)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], vola))
TSI <- data.frame()
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], vola))
View(TSI)
mean(tmp$ret, na.rm = TRUE)
SharpeRatio(COP.DE)
?SharpeRatio
SharpeRatio(tmp$`Previous Day Price`)
SharpeRatio(tmp$ret)
SharpeRatio(data.frame(tmp$Date,tmp$ret))
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], vola))
View(TSI)
# Cosmetics
colnames(TSI) <- c("Date", "Ticker", "
colnames(TSI) <- c("Date", "Ticker", "TSI", "Sharpe")
View(TSI)
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date, Sharpe)
View(TSIlist)
runApp()
runApp()
runApp()
?volatility
volatility(COP.DE)
plot(volatility(COP.DE))
View(tmp)
sum(tmp$ret >= 0.03)
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
View(tmp)
tmp$ret>0.03
tmp$ret >= 0.03
sum(tmp$ret >= 0.03)
sum(tmp$ret >= 0.03, na.rm = TRUE)
32/245
runApp()
max(tmp$ret)
max(tmp$ret, na.rm = TRUE)
min(tmp$ret, na.rm = TRUE)
plot(tmp$ret)
plot(tmp$Date,tmp$ret)
abline(h=0)
sum(tmp$ret > 0, na.rm = TRUE)
sum(tmp$ret > 0, na.rm = TRUE)/nrow(tmp)
plot(tmp$Date,tmp$ret, type="l")
abline(h=0)
abline(h=-0.5)
abline(h=-0.05)
abline(h=0.05)
runApp()
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max, min))
min <- min(tmp$ret, na.rm = TRUE)
runApp()
View(TSIlist)
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max1, min1))
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
max1 <- max(tmp$ret, na.rm = TRUE)#sum(tmp$ret >= 0.03, na.rm = TRUE) / nrow(tmp)
min1 <- min(tmp$ret, na.rm = TRUE)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max1, min1))
TSI <- data.frame()
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
max1 <- max(tmp$ret, na.rm = TRUE)#sum(tmp$ret >= 0.03, na.rm = TRUE) / nrow(tmp)
min1 <- min(tmp$ret, na.rm = TRUE)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max1, min1))
View(TSIlist)
colnames(TSI) <- c("Date", "Ticker", "TSI", "Max1", "Min1")
View(TSI)
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
View(TSIlist)
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date, max1, min1)
View(TSIlist)
colnames(TSI) <- c("Date", "Ticker", "TSI", "max1", "min1")
# Merge
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date, max1, min1)
View(TSIlist)
runApp()
s <- new.env()
for (i in 1:nrow(ticks)){
#incProgress(amount = 1/nrow(ticks), detail = print(ticks$Ticker[i]))
try(s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1"))
}
ticks <- read.csv("TecDAXSDAX.csv", stringsAsFactors = FALSE)
ticks$Ticker <- gsub(".DE", "", ticks$Ticker)
ticks$Ticker <- gsub("\\^", "", ticks$Ticker)
ticks$Ticker <- paste("SSE/",ticks$Ticker, sep = "")
for (i in 1:nrow(ticks)){
#incProgress(amount = 1/nrow(ticks), detail = print(ticks$Ticker[i]))
try(s[[ticks$Ticker[i]]] <- Quandl(ticks$Ticker[i], start_date = "2015-1-1"))
}
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
Sys.sleep(.1)
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
max1 <- max(tmp$ret, na.rm = TRUE)#sum(tmp$ret >= 0.03, na.rm = TRUE) / nrow(tmp)
min1 <- min(tmp$ret, na.rm = TRUE)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
#s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max1, min1))
})#End Try
}#End FOR loop
TSI <- data.frame()
for (i in ls(s)){
#incProgress(amount = 1/length(ls(s)), detail = print(i))
Sys.sleep(.1)
try({
tmp <- s[[i]]
tmp <- tmp %>% arrange(Date)
tmp$sma125 <- SMA(tmp$`Previous Day Price`, 125)
tmp$sma25 <- SMA(tmp$`Previous Day Price`, 25)
# INJECT VOLA CONTOROL
tmp$ret <- 1-tmp$`Previous Day Price` / lag(tmp$`Previous Day Price`)
max1 <- max(tmp$ret, na.rm = TRUE)#sum(tmp$ret >= 0.03, na.rm = TRUE) / nrow(tmp)
min1 <- min(tmp$ret, na.rm = TRUE)
tmp$TSI <- tmp$sma25 / tmp$sma125
tmp <- tmp %>% arrange(desc(Date))
#s[[i]] <- tmp
#OUTPUT w/ vola
TSI <- rbind(TSI, data.frame(tmp$Date[1], i, tmp$TSI[1], max1, min1))
})#End Try
}#End FOR loop
# Cosmetics
colnames(TSI) <- c("Date", "Ticker", "TSI", "max1", "min1")
# Merge
TSIlist <- merge(TSI, ticks, by.x = "Ticker", by.y = "Ticker")
TSIlist <- TSIlist %>% arrange(desc(TSI)) %>% select(Name, TSI, Date, max1, min1)
View(TSIlist)
output$TecSMEAN <- renderText(sprintf("Sell-level: %.3f",quantile(TSIlist$TSI, 0.8)))
runApp()
chartSeries(s$`SSE/NEM`)
plot(s$`SSE/NEM`)
plot(s$`SSE/NEM`$`Previous Day Price`)
plot(s$`SSE/NEM`$`Previous Day Price`, type = "l")
plot(s$`SSE/NEM`, s$`SSE/NEM`$`Previous Day Price`, type = "l")
plot(s$`SSE/NEM`$Date , s$`SSE/NEM`$`Previous Day Price`, type = "l")
View(s$`SSE/NEM`)
runApp()
View(s$`SSE/BIO3`)
77.49/26.2
tmp <- tmp %>% arrange(Date)
View(tmp)
tmp[1]
tmp[1,]
lag(tmp[1,])
tmp
lag(tmp)
tmp$`Previous Day Price`
lag(tmp$`Previous Day Price`)
tmp$`Previous Day Price`
max(tmp$ret, na.rm = TRIE)
max(tmp$ret, na.rm = TRUE)
runApp()
dat <- read.csv(file.choose())
str(dat)
dat <- read.csv(file.choose(), stringsAsFactors = F)
str(dat)
grep("AAPL", dat$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("NFLX", dat$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("AAPL", dat$SEC.IILG_NONCASHINTERESTINCOME_Q)
a <- dat$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income[grep("AAPL", dat$SEC.IILG_NONCASHINTERESTINCOME_Q),]
a <- dat$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income[grep("AAPL", dat$SEC.IILG_NONCASHINTERESTINCOME_Q)]
a
View(a)
View(data.frame(a))
a <- dat[grep("AAPL", dat$SEC.IILG_NONCASHINTERESTINCOME_Q),]
View(a)
grep("Revenue" a$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("Revenue", a$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("Revenu", a$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("Income", a$SEC.IILG_NONCASHINTERESTINCOME_Q)
grep("Income", a$SEC.IILG_NONCASHINTERESTINCOME_Q, ignore.case = TRUE)
b <- a[grep("Income", a$SEC.IILG_NONCASHINTERESTINCOME_Q, ignore.case = TRUE),]
View(b)
grep("outstanding", dat$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income, ignore.case = T)
grep("shares outstanding", dat$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income, ignore.case = T)
grep("shares outstanding", a$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income, ignore.case = T)
a[grep("shares outstanding", a$Interval.Leisure.Group..Inc....IILG...Quarterly.Non.Cash.Interest.Income, ignore.case = T),]
library(Quandl)
head(QUandl("SEC/AAPL_COMMONSTOCKSHARESOUTSTANDING_Q"))
head(Quandl("SEC/AAPL_COMMONSTOCKSHARESOUTSTANDING_Q"))
tail(Quandl("SEC/AAPL_COMMONSTOCKSHARESOUTSTANDING_Q"))
head(Quandl("SEC/AAPL_COMMONSTOCKSHARESOUTSTANDING_Q"))
head(Quandl("SEC/AAPL_ENTITYCOMMONSTOCKSHARESOUTSTANDING_A"))
head(Quandl("SEC/AAPL_WEIGHTEDAVERAGENUMBEROFDILUTEDSHARESOUTSTANDING_Q"))
head(Quandl("SEC/SEC/AAPL_WEIGHTEDAVERAGENUMBEROFSHARESOUTSTANDINGBASIC_Q"))
head(Quandl("SEC/AAPL_WEIGHTEDAVERAGENUMBEROFSHARESOUTSTANDINGBASIC_Q"))
head(Quandl("SEC/AAPL_COMMONSTOCKSHARESOUTSTANDING_Q"))
?cov
