q()
acs
https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
source("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r")
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
str(req)
str(req)
req$headers$date
a <- fromJSON(req)
library(jsonlite)
a <- fromJSON(req)
str(req)
str(req)
req$date
library(jsonlite)
a <- fromJSON(https://api.github.com/users/jtleek/repos)
a <- fromJSON("https://api.github.com/users/jtleek/repos")
str(a)
content(req)
View(a)
a[a$name = "datasharing"]
a[a$name = "datasharing",]
subset(a, a$name = "datasharing")
str(req)
req
?subset
subset(a, name = "datasharing")
b<- subset(a, name = "datasharing")
str(b)
b<- subset(a, name == "datasharing")
b
b$created_at
req$content
str(req)
test <- jsonlite::fromJSON(toJSON(req))
a <- fromJSON("https://api.github.com/users/jtleek/repos")
b$created_at
install.packages()
install.packages("sqldf")
library(sqldf)
acs
acs <- read.csv(file.choose())
str(acs)
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
str(sqldf("select pwgtp1 from acs where AGEP < 50"))
acs <- read.csv(file.choose())
str(acs$AGEP)
str(sqldf("select unique AGEP from acs"))
?unique
str(unique(acs$AGEP)
)
str(sqldf("select distinct AGEP from acs"))
library(httr)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
ht <- readLines(con)
close(con)
library(XML)
str(ht)
nchar(ht)
nu <- nchar(ht)
nu[10]
nu[20]
nu[30]
nu[100]
install.packages("foreign")
library(foreign)
?foreign
??Foreign
?read.fwf
a <- read.fwf(file.choose())
?read.fortran
a <- read.fortran(file.choose(),c("A9"))
View(a)
a <- read.fortran(file.choose(),c("A10"))
View(a)
View(a)
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "2D2.1"))
a <- read.fortran(file.choose(),c("A10", "5D2.1"))
?read.fwf
a<- read.fwf(file.choose(), c(10,5,5,5))
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4))
View(a)
str(a)
b <- as.numeric(a$V3)
rm(b)
b<- a[4:nrow(a),]
View(b)
View(b)
b<- a[5:nrow(a),]
View(b)
fourth <- as.numeric(b$V6)
nineth <- as.numeric(b$V13)
sum(fourth)
sum(nineth)
sum(fourth)+ sum(nineth)
nineth <- as.numeric(b$V12)
sum(nineth)
sum(nineth)+sum(forth)
sum(nineth)+sum(fourth)
sum(foruth)
sum(fourth)
sum(as.numeric(b$V6))
sum(as.numeric(b$V7))
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=5)
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=4)
View(a)
b<-as.numeric(a$V6)
sum(b)
install.packages("lattice")
library(lattice)
str(xyplot())
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
q()
# The infamous "Ampel"
library(TTR)
library(zoo)
ampel <- function(){
# Today minus 250 trading days
start.date <- format(Sys.Date()-300, "%Y%m%d")
end.date <- format(Sys.Date()-1, "%Y%m%d")
# Ticker Symbols
tickers <- c("^GDAXI", "^MDAXI", "^GSPC", "^NDX", "^GSPTSE", "^BVSP",
"^FTSE", "^SSMI", "^IBEX", "^FCHI", "FTSEMIB.MI", "^N225", "^HSI", "^AORD")
vals <- list()
SMAs <- list()
ratio <- list()
SMAratio <- list()
last10 <- list()
# Loop over ticker
for (i in tickers){
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
# Compute SMA for 125 days
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
SMAratio[[i]] <- SMA(ratio[[i]], n = 14)
# Extract last 10 vals of each
a <- nrow(SMAratio[[i]])
b <- a-9L
# out <- merge(x = out, y = as.data.frame(SMAratio[[i]][b:a]) , all.y = TRUE)
last10 <- cbind(last10, as.numeric(SMAratio[[i]][b:a]))
}
# Make Out Matrix
matr <- matrix(unlist(last10), ncol = 14)
colnames(matr) <- tickers
# Ampel values
amp <- apply(matr,1,mean)
plot(amp)
amp.val <- mean(matr)
# Order Indices by TSi Strength
ord <- order(matr[nrow(matr),], decreasing = TRUE)
# Output
out <- list("AMPEL-value" = amp.val, "Indices" = matr[nrow(matr),ord], "10-day development" = amp)
# Write to file
# (to be implemented)
return(out)
}
ampel()
q()
q()
to <- Sys.Date()
q()
---
q()
---
q()
install.packages("downloader")
q()
library(quantmod)
stockSymbols("^Tecdax")
getSymbols("tecdax")
getSymbols("^tecdax")
View(TECDAX)
getSymbols("^sdaxi")
View(SDAXI)
getSymbols("^mdaxi")
View(MDAXI)
q()
q()
license()
?lm
?mean
?predict
?lm
?dGamma
?dgamma
?colSums
getMethod(mean)
getMethod(lm)
getMethod(predict)
getMethod(dgamma)
?getMethod
getS3method(mean)
getS3method(lm)
getS3method(predict)
getS3method("predict")
getS3method(predict)
getS3method(predict())
getS3method(predict
)
getS3method(dgamma)
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment2")
library(data.table)
library(dplyr)
library(ggplot2)
library(lubridate)
library(R.utils)
# Dowload File and unzip
if(!file.exists("StormData.csv")){
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "StormData.csv.bz2")
bunzip2("StormData.csv.bz2")
}
# Read data (datatable package for faster processing)
dat <- fread("StormData.csv")
# Selecting relevant colums and only harm > 0 in at least one column to reduce data strain
dat <- dat %>% select(BGN_DATE, STATE, EVTYPE, FATALITIES:CROPDMGEXP) %>% filter(FATALITIES > 0 | INJURIES > 0 | PROPDMG > 0 | CROPDMG > 0)
# Parsing dates (only needed for appendix)
dat$BGN_DATE <- mdy_hms(dat$BGN_DATE)
# Extrating the unique exponential units and making decoding table
decode <- data.frame(symb = unique(append(unique(dat$CROPDMGEXP), unique(dat$PROPDMGEXP))),
decode = 10^c(0,6,3,6,9,0,0,3,0,5,6,4,2,2,7,3,3,0))
# The following merges in the decode table, renames the merged columns, computes the value
# (multiply exponent with value) and reduces the data by removing unwanted columns
# Pipeline operator for the win :-)
dat <- dat %>%
merge(y = decode, by.x = "PROPDMGEXP", by.y = "symb") %>%
rename(PropExp = decode) %>%
merge(y = decode, by.x = "CROPDMGEXP", by.y = "symb") %>%
rename(CropExp = decode) %>%
mutate(PropDam = PROPDMG*PropExp) %>%
mutate(CropDam = CROPDMG*CropExp) %>%
select(BGN_DATE:INJURIES,PropDam,CropDam)
# Summarizing Fatalities
fat <- dat %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES)) %>%
arrange(desc(Fatalities)) %>%
top_n(10, Fatalities)
# Plot Fatalities
ggplot(data = fat, aes(x = reorder(EVTYPE, Fatalities), y = Fatalities)) +
geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ggtitle("Fatalities")
# Summarizing Injuries
inj <- dat %>%
group_by(EVTYPE) %>%
summarise(Injuries = sum(INJURIES)) %>%
arrange(desc(Injuries)) %>%
top_n(10, Injuries)
# Plot Injuries
ggplot(data = inj, aes(x = reorder(EVTYPE,Injuries), y = Injuries)) +
geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") +
ggtitle("Injuries")
# Summarizing total Damand (Crop + Property)
dmg <- dat %>%
mutate(totdmg = CropDam+PropDam) %>%
group_by(EVTYPE) %>%
summarise(TotalDamage = sum(totdmg)) %>%
arrange(desc(TotalDamage)) %>%
top_n(10, TotalDamage)
# Plot Damages
ggplot(data = dmg, aes(x = reorder(EVTYPE,TotalDamage), y = TotalDamage)) +
geom_bar(stat = "identity") +
coord_flip() +
xlab("Event Type") + ylab("Total Damage in $") + ggtitle("Economic Damage in USD")
dat %>% summarize(sum(CropDam),sum(PropDam))
dat %>% summarize(CD = sum(CropDam),sum(PD = PropDam)) %>% mutate(perc = CD/(CD+PD))
dat %>% summarize(CD = sum(CropDam),sum(PD = PropDam))
dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(perc = CD/(CD+PD))
View(dat)
mutate(perc = CD/(CD+PD))
dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% CD/(CD+PD)
dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(perc = CD/(CD+PD))
View(dat)
print(dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(perc = CD/(CD+PD)))
a <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(perc = CD/(CD+PD))
View(a)
perc <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(perc = CD/(CD+PD))
perc
print(perc)
perc <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(CDperc = CD/(CD+PD), PDperc = PD(CD+PD))
print(perc)
perc <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(CDperc = CD/(CD+PD), PDperc = PD(CD+PD))
perc <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam))
perc
mutate(CDperc = CD/(CD+PD), PDperc = PD(CD+PD))
perc <- dat %>% summarize(CD = sum(CropDam), PD = sum(PropDam)) %>% mutate(CDperc = CD/(CD+PD), PDperc = PD(CD+PD))
perc$PD / (perc$CD + perc$PD)
setwd("~/Google Drive/TSI/R-Version/GITed Version/Quandl")
library(Quandl)
library(lubridate)
library(dplyr)
library(quantmod)
Quandl.api_key("Uy7EG7K9GveKstF_LRzy")
stdt <- "2013-01-01"
tickers <- read.csv("HDAX.csv", stringsAsFactors = FALSE)
tickers$Quandl <- paste("SSE/", tickers$Ticker, sep = "")
# Make new Env
dat <- new.env()
#DEbug
#tickers <- tickers %>% top_n(200)
# Download loop
system.time(
for (i in 1:nrow(tickers)) {
try(dat[[tickers$Ticker[i]]] <- Quandl(tickers$Quandl[i], start_date = stdt, type = "xts"))
}
)
# Analysis Loop
for(i in ls(dat)){
# same as before: pull data
tmp <- dat[[i]]
tmp$a <- SMA(tmp[,6], 125)
tmp$b <- SMA(tmp[,6], 25)
tmp$c <- tmp$b/tmp$a
dat[[i]] <- tmp
}
View(tmp)
dat$VOW3
setwd("~/Google Drive/TSI/R-Version/GITed Version/Quandl")
library(Quandl)
library(lubridate)
library(dplyr)
library(quantmod)
Quandl.api_key("Uy7EG7K9GveKstF_LRzy")
stdt <- "2013-01-01"
tickers <- read.csv("german.csv")
tickers$Quandl.Code <- as.character(tickers$Quandl.Code)
tickers$Ticker <- as.character(tickers$Ticker)
# Make new Env
dat <- new.env()
#DEbug
#tickers <- tickers %>% top_n(200)
# Only do Adjusted Closing
tickers$sub <- paste(tickers$Quandl.Code,"", sep = "")
# Download loop
system.time(
for (i in 1:nrow(tickers)) {
try(dat[[tickers$Ticker[i]]] <- Quandl(tickers$sub[i], start_date = stdt, type = "xts"))
}
)
dat$`1VS`
q()
