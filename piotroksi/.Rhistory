# Get data -> change the header!
for (i in tickers$X.TECDAX){
tryCatch(vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE), finally = next())
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
}
for (i in tickers$X.TECDAX){
tryCatch({
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)}
, error = function(e){})
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
}
vals <- list()
SMAs <- list()
ratio <- list()
# Get data -> change the header!
for (i in tickers$X.TECDAX){
tryCatch({
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)}
, error = function(e){message("NOT FOUND")})
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
}
getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
getYahooData("BMW.DE", start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
tryCatch(getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE), error = message("Nope"))
tryCatch(getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE), error = function(e){})
for (i in tickers$X.TECDAX){
tryCatch({
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)}
, error = function(e){message("NOT FOUND")})
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
}
debugSource('~/Google Drive/TSI/R-Version/TSI-LOOP.R')
for (i in tickers$X.TECDAX){
tryCatch({
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
, error = function(e){message("NOT FOUND")})
}
}
for (i in tickers$X.TECDAX){
tryCatch({
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
}, error = function(e){message("NOT FOUND")})
}
str(vals)
ratio
q()
?line
?vars
q()
acs
https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
source("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r")
library(httr)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
str(req)
str(req)
req$headers$date
a <- fromJSON(req)
library(jsonlite)
a <- fromJSON(req)
str(req)
str(req)
req$date
library(jsonlite)
a <- fromJSON(https://api.github.com/users/jtleek/repos)
a <- fromJSON("https://api.github.com/users/jtleek/repos")
str(a)
content(req)
View(a)
a[a$name = "datasharing"]
a[a$name = "datasharing",]
subset(a, a$name = "datasharing")
str(req)
req
?subset
subset(a, name = "datasharing")
b<- subset(a, name = "datasharing")
str(b)
b<- subset(a, name == "datasharing")
b
b$created_at
req$content
str(req)
test <- jsonlite::fromJSON(toJSON(req))
a <- fromJSON("https://api.github.com/users/jtleek/repos")
b$created_at
install.packages()
install.packages("sqldf")
library(sqldf)
acs
acs <- read.csv(file.choose())
str(acs)
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
str(sqldf("select pwgtp1 from acs where AGEP < 50"))
acs <- read.csv(file.choose())
str(acs$AGEP)
str(sqldf("select unique AGEP from acs"))
?unique
str(unique(acs$AGEP)
)
str(sqldf("select distinct AGEP from acs"))
library(httr)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
ht <- readLines(con)
close(con)
library(XML)
str(ht)
nchar(ht)
nu <- nchar(ht)
nu[10]
nu[20]
nu[30]
nu[100]
install.packages("foreign")
library(foreign)
?foreign
??Foreign
?read.fwf
a <- read.fwf(file.choose())
?read.fortran
a <- read.fortran(file.choose(),c("A9"))
View(a)
a <- read.fortran(file.choose(),c("A10"))
View(a)
View(a)
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "2D2.1"))
a <- read.fortran(file.choose(),c("A10", "5D2.1"))
?read.fwf
a<- read.fwf(file.choose(), c(10,5,5,5))
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4))
View(a)
str(a)
b <- as.numeric(a$V3)
rm(b)
b<- a[4:nrow(a),]
View(b)
View(b)
b<- a[5:nrow(a),]
View(b)
fourth <- as.numeric(b$V6)
nineth <- as.numeric(b$V13)
sum(fourth)
sum(nineth)
sum(fourth)+ sum(nineth)
nineth <- as.numeric(b$V12)
sum(nineth)
sum(nineth)+sum(forth)
sum(nineth)+sum(fourth)
sum(foruth)
sum(fourth)
sum(as.numeric(b$V6))
sum(as.numeric(b$V7))
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=5)
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=4)
View(a)
b<-as.numeric(a$V6)
sum(b)
install.packages("lattice")
library(lattice)
str(xyplot())
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
q()
# The infamous "Ampel"
library(TTR)
library(zoo)
ampel <- function(){
# Today minus 250 trading days
start.date <- format(Sys.Date()-300, "%Y%m%d")
end.date <- format(Sys.Date()-1, "%Y%m%d")
# Ticker Symbols
tickers <- c("^GDAXI", "^MDAXI", "^GSPC", "^NDX", "^GSPTSE", "^BVSP",
"^FTSE", "^SSMI", "^IBEX", "^FCHI", "FTSEMIB.MI", "^N225", "^HSI", "^AORD")
vals <- list()
SMAs <- list()
ratio <- list()
SMAratio <- list()
last10 <- list()
# Loop over ticker
for (i in tickers){
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
# Compute SMA for 125 days
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
SMAratio[[i]] <- SMA(ratio[[i]], n = 14)
# Extract last 10 vals of each
a <- nrow(SMAratio[[i]])
b <- a-9L
# out <- merge(x = out, y = as.data.frame(SMAratio[[i]][b:a]) , all.y = TRUE)
last10 <- cbind(last10, as.numeric(SMAratio[[i]][b:a]))
}
# Make Out Matrix
matr <- matrix(unlist(last10), ncol = 14)
colnames(matr) <- tickers
# Ampel values
amp <- apply(matr,1,mean)
plot(amp)
amp.val <- mean(matr)
# Order Indices by TSi Strength
ord <- order(matr[nrow(matr),], decreasing = TRUE)
# Output
out <- list("AMPEL-value" = amp.val, "Indices" = matr[nrow(matr),ord], "10-day development" = amp)
# Write to file
# (to be implemented)
return(out)
}
ampel()
q()
q()
to <- Sys.Date()
q()
---
q()
---
q()
install.packages("downloader")
q()
library(quantmod)
stockSymbols("^Tecdax")
getSymbols("tecdax")
getSymbols("^tecdax")
View(TECDAX)
getSymbols("^sdaxi")
View(SDAXI)
getSymbols("^mdaxi")
View(MDAXI)
q()
q()
read.csv("http://sec.kimonolabs.com/companies/NFLX/forms/10-K.csv")
dat <- read.csv("http://sec.kimonolabs.com/companies/NFLX/forms/10-K.csv")
View(dat)
dat <- read.csv("http://sec.kimonolabs.com/companies/NFLX/forms/10-Q.csv")
## optnal
library(dplyr)
library(quantmod)
library(xtable)
source("piotroski.R")
setwd("~/Google Drive/TSI/R-Version/GITed Version/piotroksi")
ticks <- read.csv("nasdaq100list.csv")
ticks$Symbol <- as.character(ticks$Symbol)
#2###############
fins <- new.env()
for (i in 1:nrow(ticks)){
try(getFinancials(ticks$Symbol[i], env = fins))
}
pio <- data.frame(matrix(ncol=2))
colnames(pio) <- c("symb", "score")
setwd("~/Google Drive/TSI/R-Version/GITed Version/piotroksi")
## optnal
setwd("~/Google Drive/TSI/R-Version/GITed Version/piotroksi")
library(dplyr)
library(quantmod)
library(xtable)
source("piotroski.R")
View(ticks)
pio <- data.frame(matrix(ncol=2))
colnames(pio) <- c("symb", "score")
for(i in ls(fins)){
print(i)
pio[i,1] <- i
try(
pio[i,2] <- Piotroski(fins[[i]])
)
}
pio <- pio %>% arrange(desc(score))
#pull and clean market symbols
a <- stockSymbols(exchange = c("NASDAQ","AMEX","NYSE"))
a$MarketCap <- gsub("\\$","", a$MarketCap)
a$MarketCap <- gsub("\\.","", a$MarketCap)
a$MarketCap <- gsub("M","000000", a$MarketCap)
a$MarketCap <- gsub("B","000000000", a$MarketCap)
a$MarketCap <- as.numeric(a$MarketCap)
a <- a %>%  group_by(Sector) %>%  arrange(desc(MarketCap)) %>% filter(IPOyear < "2013", MarketCap > "50000000")
ticks <- a
View(ticks)
a <- stockSymbols(exchange = c("NASDAQ","AMEX","NYSE"))
View(a)
View(a)
a$MarketCap <- gsub("\\$","", a$MarketCap)
a$MarketCap <- gsub("\\.","", a$MarketCap)
a$MarketCap <- gsub("M","000000", a$MarketCap)
a$MarketCap <- gsub("B","000000000", a$MarketCap)
a$MarketCap <- as.numeric(a$MarketCap)
a %>%  group_by(Sector) %>%  arrange(desc(MarketCap)) %>% filter(IPOyear < "2013", MarketCap > "50000000")
a <- a %>%  group_by(Sector) %>%  arrange(desc(MarketCap)) %>% filter(MarketCap > "50000000")
View(a)
View(ticks)
fins <- new.env()
for (i in 1:nrow(ticks)){
try(getFinancials(ticks$Symbol[i], env = fins))
}
View(ticks)
rm(fins, i, ticks)
ticks <- a
for (i in 1:nrow(ticks)){
try(getFinancials(ticks$Symbol[i], env = fins))
}
fins <- new.env()
for (i in 1:nrow(ticks)){
try(getFinancials(ticks$Symbol[i], env = fins))
}
ls()
ls(fins)
for(i in ls(fins)){
print(i)
pio[i,1] <- i
try(
pio[i,2] <- Piotroski(fins[[i]])
)
}
pio <- pio %>% arrange(desc(score))
pio <- data.frame(matrix(ncol=2))
colnames(pio) <- c("symb", "score")
for(i in ls(fins)){
print(i)
pio[i,1] <- i
try(
pio[i,2] <- Piotroski(fins[[i]])
)
}
pio <- pio %>% arrange(desc(score))
fins$xly
View(pio)
fins <- new.env()
for (i in 1:nrow(ticks)){
try(getFinancials(ticks$Symbol[i], env = fins))
}
az <- read.csv("http://financials.morningstar.com/ajax/ReportProcess4CSV.html?t=TWTR&reportType=is&period=12&dataType=A&order=asc&columnYear=5&number=3")
az <- read.csv("http://financials.morningstar.com/ajax/ReportProcess4CSV.html?t=TWTR&reportType=is&period=12&dataType=A&order=asc&columnYear=5&number=3", header = FALSE)
View(az)
?inhehrits
?inherits
