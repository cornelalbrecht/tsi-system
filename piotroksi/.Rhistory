library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "793f7d2ea0f07a356075",
secret = "e05955609d629ce13851a8dc7d02cdf0b58a6482")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
str(req)
str(req)
req$headers$date
a <- fromJSON(req)
library(jsonlite)
a <- fromJSON(req)
str(req)
str(req)
req$date
library(jsonlite)
a <- fromJSON(https://api.github.com/users/jtleek/repos)
a <- fromJSON("https://api.github.com/users/jtleek/repos")
str(a)
content(req)
View(a)
a[a$name = "datasharing"]
a[a$name = "datasharing",]
subset(a, a$name = "datasharing")
str(req)
req
?subset
subset(a, name = "datasharing")
b<- subset(a, name = "datasharing")
str(b)
b<- subset(a, name == "datasharing")
b
b$created_at
req$content
str(req)
test <- jsonlite::fromJSON(toJSON(req))
a <- fromJSON("https://api.github.com/users/jtleek/repos")
b$created_at
install.packages()
install.packages("sqldf")
library(sqldf)
acs
acs <- read.csv(file.choose())
str(acs)
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
str(sqldf("select pwgtp1 from acs where AGEP < 50"))
acs <- read.csv(file.choose())
str(acs$AGEP)
str(sqldf("select unique AGEP from acs"))
?unique
str(unique(acs$AGEP)
)
str(sqldf("select distinct AGEP from acs"))
library(httr)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
ht <- readLines(con)
close(con)
library(XML)
str(ht)
nchar(ht)
nu <- nchar(ht)
nu[10]
nu[20]
nu[30]
nu[100]
install.packages("foreign")
library(foreign)
?foreign
??Foreign
?read.fwf
a <- read.fwf(file.choose())
?read.fortran
a <- read.fortran(file.choose(),c("A9"))
View(a)
a <- read.fortran(file.choose(),c("A10"))
View(a)
View(a)
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "2D2.1"))
a <- read.fortran(file.choose(),c("A10", "5D2.1"))
?read.fwf
a<- read.fwf(file.choose(), c(10,5,5,5))
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4))
View(a)
str(a)
b <- as.numeric(a$V3)
rm(b)
b<- a[4:nrow(a),]
View(b)
View(b)
b<- a[5:nrow(a),]
View(b)
fourth <- as.numeric(b$V6)
nineth <- as.numeric(b$V13)
sum(fourth)
sum(nineth)
sum(fourth)+ sum(nineth)
nineth <- as.numeric(b$V12)
sum(nineth)
sum(nineth)+sum(forth)
sum(nineth)+sum(fourth)
sum(foruth)
sum(fourth)
sum(as.numeric(b$V6))
sum(as.numeric(b$V7))
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=5)
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=4)
View(a)
b<-as.numeric(a$V6)
sum(b)
install.packages("lattice")
library(lattice)
str(xyplot())
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
q()
# The infamous "Ampel"
library(TTR)
library(zoo)
ampel <- function(){
# Today minus 250 trading days
start.date <- format(Sys.Date()-300, "%Y%m%d")
end.date <- format(Sys.Date()-1, "%Y%m%d")
# Ticker Symbols
tickers <- c("^GDAXI", "^MDAXI", "^GSPC", "^NDX", "^GSPTSE", "^BVSP",
"^FTSE", "^SSMI", "^IBEX", "^FCHI", "FTSEMIB.MI", "^N225", "^HSI", "^AORD")
vals <- list()
SMAs <- list()
ratio <- list()
SMAratio <- list()
last10 <- list()
# Loop over ticker
for (i in tickers){
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
# Compute SMA for 125 days
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
SMAratio[[i]] <- SMA(ratio[[i]], n = 14)
# Extract last 10 vals of each
a <- nrow(SMAratio[[i]])
b <- a-9L
# out <- merge(x = out, y = as.data.frame(SMAratio[[i]][b:a]) , all.y = TRUE)
last10 <- cbind(last10, as.numeric(SMAratio[[i]][b:a]))
}
# Make Out Matrix
matr <- matrix(unlist(last10), ncol = 14)
colnames(matr) <- tickers
# Ampel values
amp <- apply(matr,1,mean)
plot(amp)
amp.val <- mean(matr)
# Order Indices by TSi Strength
ord <- order(matr[nrow(matr),], decreasing = TRUE)
# Output
out <- list("AMPEL-value" = amp.val, "Indices" = matr[nrow(matr),ord], "10-day development" = amp)
# Write to file
# (to be implemented)
return(out)
}
ampel()
q()
q()
to <- Sys.Date()
q()
---
q()
---
q()
install.packages("downloader")
q()
library(quantmod)
stockSymbols("^Tecdax")
getSymbols("tecdax")
getSymbols("^tecdax")
View(TECDAX)
getSymbols("^sdaxi")
View(SDAXI)
getSymbols("^mdaxi")
View(MDAXI)
q()
library(xml)
setwd("~/Google Drive/TSI/R-Version/GITed Version/piotroksi")
library(XML)
a <- htmlParse("http://finance.yahoo.com/q/is?s=NFLX+Income+Statement&annual")
a
xpathApply(a)
?xpathApply
xpathApply(a, "<table>")
htmlTreeParse(a)
plain.text <- xpathSApply(a, "//p", xmlValue)
plain.text
plain.text <- xpathSApply(a, "//table", xmlValue)
plain.text
plain.text <- xpathSApply(a, "//table //n", xmlValue)
plain.text <- xpathSApply(a, "//table", xmlValue)
plain.text <- xpathSApply(a, "//strong", xmlValue)
plain.text
plain.text <- xpathSApply(a, "//", xmlValue)
plain.text <- xpathSApply(a, "//div", xmlValue)
plain.text
plain.text <- xpathSApply(a, "//big", xmlValue)
library(quandl)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
Quandl.api_key("Uy7EG7K9GveKstF_LRzy")
mydata = Quandl("FRED/GDP")
View(mydata)
a <- Quandl("BMW_X")
a <- Quandl("BMW")
Quandl.search("BMW")
a <- Quandl("FSE/BMW_X")
View(a)
str(a)
plot(a$Date,a$Close)
plot(a$Date,a$Close, type = "l")
QUandl(FSE)
Quandl(FSE)
b <- Quandl("FSE")
?Quandl.database.bulk_download_url
?Quandl.database.bulk_download_to_file
getwd()
Quandl.database.bulk_download_to_file("FSE", "test.csv")
Quandl.database.bulk_download_to_file("SSE", "test.csv")
Quandl.database.bulk_download_to_file("FRED", "test.csv")
warnings()
library(data.table)
dir()
dir()[1]
fread(dir()[1])
c <- fread(dir()[1])
head(c)
tail(c)
View(c)
a <- Quandl("FSE/BAF_X")
View(a)
plot(a$Date,a$Close)
str(a)
plot(a$Date[a$Date > "2014"],a$Close)
library(lubridate)
plot(a$Date[a$Date > mdy("11-2014")],a$Close)
plot(a$Date[a$Date > "2014",],a$Close)
plot(a$Date[a$Date > mdy("11-2014"),],a$Close)
plot(a$Date[ymd(a$Date) > mdy("11-2014"),],a$Close)
plot(a$Date[1:50,],a$Close)
plot(a$Date[1:50,],a$Close[1:50,])
plot(a$Date[1:50],a$Close[1:50])
plot(a$Date[1:500],a$Close[1:500])
plot(a$Date[1:500],a$Close[1:500], type = "l")
Quandl.search("Balda")
c <- Quandl("NS1/BAF_GR")
c
View(c)
plot(c$Date,c$Sentiment)
plot(c$Date,c$Sentiment, type = "l")
c <- Quandl("NS1/ADV_GR")
c <- Quandl("NS1/BMW_GR")
plot(c$Date,c$Sentiment, type = "l")
c <- Quandl("NS1/VOW_GR")
plot(c$Date,c$Sentiment, type = "l")
c <- Quandl("YAHOO/BAL")
c <- Quandl("YAHOO/BAL.DE")
Quandl.search("Balda")
a <- Quandl.search("Balda")
View(a)
b <- Quandl("BALOF")
b <- Quandl("YAHOO/BALOF")
View(b)
View(b)
View(c)
View(b)
plot(b$Date,b$`Adjusted Close`)
line(b$Date,b$Close)
lines(b$Date,b$Close)
c <- Quandl("YAHOO/DE_BAF")
View(c)
Quandl.search("NFLX")
aa <- Quandl.search("NFLX")
View(aa)
View(a)
View(aa)
y <- Quandl("ZRH/NFLX")
View(y)
y <- Quandl("XASE/NFLX")
View(y)
y <- Quandl("XASE/AAPL")
View(y)
View(aa)
y <- Quandl("ZTP/AAPL")
View(y)
plot(y$OBS_DATE, y$TP_MEAN_EST)
y <- Quandl("ZTP/NFLX")
plot(y$OBS_DATE, y$TP_MEAN_EST)
y <- Quandl("ZTP/AMZN")
plot(y$OBS_DATE, y$TP_MEAN_EST)
View(y)
aa$description
aa$description[1]
aa$description[2]
aa$description[3]
nf <- Quandl("C2/NFLX")
nf
View(nf)
?Quandl.search
metaData("YAHOO/NFLX")
metaData("SSE/BMW")
z <- Quandl("YAHOO/INDEX_GDAXI")
z <- Quandl("YAHOO/INDEX_SDAXI")
z <- Quandl("YAHOO/INDEX_SDAX")
z <- Quandl("YAHOO/INDEX_MDAXI")
Quandl.search("SDAX")
Quandl.search("tecDAX")
Quandl.search("DAX")
z <- Quandl("YAHOO/INDEX_TECDAX")
Quandl.search("hypoport")
aaa <- Quandl("USCENSUS/IE_5040")
View(aaa)
aaa <- Quandl("GFDEBTN")
aaa <- Quandl("USCENSUS/GFDEBTN")
aaa <- Quandl("FRED/GFDEBTN")
plot(aaa$DATE,aaa$VALUE)
aaa <- Quandl("USCENSUS/H03AR_2011")
abline(v=2001)
abline(v=mdy("1-1-2001"))
abline(h=5e6)
abline(v=2500)
abline(v=25000)
abline(v=10000)
plot(aaa$Year, aaa$`Top 5 percent (Current $)`)
lines(aaa$Year, aaa$`Lowest fifth (Current $)`
)
lines(aaa$Year, aaa$`Highest fifth (Current $)`)
install.packages("acs")
library(acs)
?acs
geo.lookup("RI","Providence")
geo.lookup("Providence")
acs.lookup("income")
income<-acs.fetch(endyear = 2012, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
data(df_state_demographics)
mydata = Quandl(c("NSE/OIL.4","WIKI/AAPL.1"))
View(mydata)
mydata = Quandl(WIKI/AAPL.1")
mydata = Quandl("WIKI/AAPL.1")
View(mydata)
mydata = Quandl("WIKI/AAPL")
mydata = Quandl("WIKI/AAPL.11")
mydata = Quandl("WIKI/AAPL.11", type = "xts")
mydata = Quandl("WIKI/AAPL", type = "xts")
mydata = Quandl("WIKI/AAPL.11", type = "xts")
q()
